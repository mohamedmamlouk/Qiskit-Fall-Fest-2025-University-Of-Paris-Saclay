/*
 * Browser Detection Utilities
 * Simplified browser detection for modern browsers
 */

(function() {
    'use strict';

    var browser = {
        name: 'unknown',
        version: 0,
        mobile: false,
        os: 'unknown'
    };

    var ua = navigator.userAgent.toLowerCase();

    // Detect browser
    if (ua.indexOf('chrome') > -1 && ua.indexOf('edge') === -1) {
        browser.name = 'chrome';
    } else if (ua.indexOf('firefox') > -1) {
        browser.name = 'firefox';
    } else if (ua.indexOf('safari') > -1 && ua.indexOf('chrome') === -1) {
        browser.name = 'safari';
    } else if (ua.indexOf('edge') > -1) {
        browser.name = 'edge';
    }

    // Detect mobile
    browser.mobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(ua);

    // Detect OS
    if (ua.indexOf('windows') > -1) {
        browser.os = 'windows';
    } else if (ua.indexOf('mac') > -1) {
        browser.os = 'mac';
    } else if (ua.indexOf('linux') > -1) {
        browser.os = 'linux';
    } else if (ua.indexOf('android') > -1) {
        browser.os = 'android';
    } else if (ua.indexOf('ios') > -1 || ua.indexOf('iphone') > -1 || ua.indexOf('ipad') > -1) {
        browser.os = 'ios';
    }

    // Add classes to body
    document.body.classList.add('browser-' + browser.name);
    document.body.classList.add('os-' + browser.os);
    
    if (browser.mobile) {
        document.body.classList.add('mobile');
    } else {
        document.body.classList.add('desktop');
    }

    // Export browser object
    window.browser = browser;

    // Feature detection
    var features = {
        canvas: !!(document.createElement('canvas').getContext),
        touch: 'ontouchstart' in window,
        transitions: (function() {
            var el = document.createElement('div');
            var props = ['transition', 'WebkitTransition', 'MozTransition', 'OTransition'];
            for (var i = 0; i < props.length; i++) {
                if (el.style[props[i]] !== undefined) {
                    return true;
                }
            }
            return false;
        })(),
        animations: (function() {
            var el = document.createElement('div');
            var props = ['animation', 'WebkitAnimation', 'MozAnimation', 'OAnimation'];
            for (var i = 0; i < props.length; i++) {
                if (el.style[props[i]] !== undefined) {
                    return true;
                }
            }
            return false;
        })()
    };

    // Add feature classes
    for (var feature in features) {
        if (features[feature]) {
            document.body.classList.add('feature-' + feature);
        } else {
            document.body.classList.add('no-' + feature);
        }
    }

    window.features = features;

})();
