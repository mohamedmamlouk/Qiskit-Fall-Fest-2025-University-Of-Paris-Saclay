/*!
 * jQuery JavaScript Library v3.6.0
 * Simplified version for basic functionality
 */

(function(global, factory) {
    "use strict";
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ?
            factory(global, true) :
            function(w) {
                if (!w.document) {
                    throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
            };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    "use strict";

    var arr = [];
    var document = window.document;
    var getProto = Object.getPrototypeOf;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};

    var version = "3.6.0";

    var jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    };

    var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,

        toArray: function() {
            return slice.call(this);
        },

        get: function(num) {
            if (num == null) {
                return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
        },

        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
        },

        each: function(callback) {
            return jQuery.each(this, callback);
        },

        ready: function(fn) {
            if (document.readyState === "complete" ||
                (document.readyState !== "loading" && !document.documentElement.doScroll)) {
                window.setTimeout(fn, 1);
            } else {
                document.addEventListener("DOMContentLoaded", fn);
            }
            return this;
        }
    };

    jQuery.fn.init = function(selector, context, root) {
        var match, elem;

        if (!selector) {
            return this;
        }

        root = root || document;

        if (typeof selector === "string") {
            if (selector[0] === "<" &&
                selector[selector.length - 1] === ">" &&
                selector.length >= 3) {
                match = [null, selector, null];
            } else {
                match = [null, null, selector];
            }

            if (match && (match[1] || !context)) {
                if (match[1]) {
                    // Handle HTML strings
                    elem = document.createElement("div");
                    elem.innerHTML = selector;
                    jQuery.merge(this, elem.childNodes);
                } else {
                    // Handle selectors
                    elem = document.querySelectorAll(selector);
                    return jQuery.merge(this, elem);
                }
            }
        } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
        } else if (typeof selector === "function") {
            return root.ready !== undefined ?
                root.ready(selector) :
                selector(jQuery);
        }

        return jQuery.makeArray(selector, this);
    };

    jQuery.fn.init.prototype = jQuery.fn;

    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
        }

        if (typeof target !== "object" && typeof target !== "function") {
            target = {};
        }

        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    copy = options[name];
                    if (name === "__proto__" || target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) ||
                            (copyIsArray = Array.isArray(copy)))) {
                        src = target[name];
                        if (copyIsArray && !Array.isArray(src)) {
                            clone = [];
                        } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                            clone = {};
                        } else {
                            clone = src;
                        }
                        copyIsArray = false;
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };

    jQuery.extend({
        each: function(obj, callback) {
            var length, i = 0;
            if (Array.isArray(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        },

        merge: function(first, second) {
            var len = +second.length,
                j = 0,
                i = first.length;
            for (; j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },

        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (Array.isArray(arr)) {
                    jQuery.merge(ret, arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },

        isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
            }
            proto = getProto(obj);
            if (!proto) {
                return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        }
    });

    // Event handling
    jQuery.fn.extend({
        on: function(types, selector, data, fn) {
            return this.each(function() {
                if (typeof types === "string") {
                    var elem = this;
                    if (typeof selector === "function") {
                        fn = selector;
                        selector = undefined;
                    }
                    elem.addEventListener(types, fn);
                }
            });
        },

        off: function(types, selector, fn) {
            return this.each(function() {
                if (typeof types === "string") {
                    var elem = this;
                    if (typeof selector === "function") {
                        fn = selector;
                    }
                    elem.removeEventListener(types, fn);
                }
            });
        },

        click: function(fn) {
            return arguments.length > 0 ?
                this.on("click", fn) :
                this.trigger("click");
        },

        trigger: function(type) {
            return this.each(function() {
                var event = new Event(type, { bubbles: true });
                this.dispatchEvent(event);
            });
        }
    });

    // CSS and animations
    jQuery.fn.extend({
        addClass: function(value) {
            return this.each(function() {
                if (this.classList) {
                    this.classList.add(value);
                }
            });
        },

        removeClass: function(value) {
            return this.each(function() {
                if (this.classList) {
                    this.classList.remove(value);
                }
            });
        },

        fadeIn: function(duration, callback) {
            return this.each(function() {
                var elem = this;
                elem.style.opacity = "0";
                elem.style.display = "block";
                
                var start = performance.now();
                var animate = function(timestamp) {
                    var progress = (timestamp - start) / (duration || 400);
                    if (progress >= 1) {
                        elem.style.opacity = "1";
                        if (callback) callback();
                    } else {
                        elem.style.opacity = progress;
                        requestAnimationFrame(animate);
                    }
                };
                requestAnimationFrame(animate);
            });
        },

        fadeOut: function(duration, callback) {
            return this.each(function() {
                var elem = this;
                var start = performance.now();
                var startOpacity = parseFloat(window.getComputedStyle(elem).opacity);
                
                var animate = function(timestamp) {
                    var progress = (timestamp - start) / (duration || 400);
                    if (progress >= 1) {
                        elem.style.opacity = "0";
                        elem.style.display = "none";
                        if (callback) callback();
                    } else {
                        elem.style.opacity = startOpacity * (1 - progress);
                        requestAnimationFrame(animate);
                    }
                };
                requestAnimationFrame(animate);
            });
        }
    });

    var $ = jQuery;

    if (typeof noGlobal === "undefined") {
        window.jQuery = window.$ = jQuery;
    }

    return jQuery;
});
